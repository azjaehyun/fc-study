def git_branch = "${git_branch}"
def env_setting = "${env_setting}"

node {
    try {
        
        notifyBuild('STARTED')
        
         stage('Account Id') {
                sh "whoami"
        }
        
        stage('Init Directory Clean..') {
                sh "pwd"
                sh "sudo rm -Rf ./*"
        }
        
        stage('Git Checkout Branch : '+git_branch) {
            git(
                 branch: git_branch, 
                 changelog: true, 
                 credentialsId: 'jenkins', 
                 url: 'git@localhost:ailab/mega-dialogflow-client.git'
            )
            build_version = sh(returnStdout: true, script: 'git log -n 1 --pretty=format:"%H, Commiter: %an / Lest Message: %s"').trim()
            echo "${build_version}"
        }
      
        
        stage ('make install') {
            sh 'make install'
        }
        
        stage ('make build') {
            sh 'make build'
        }
        
        sshagent(['jenkins-deploy']) {
            stage ('Megabot-Client real workspace clean') {
                sh(returnStdout: false, script: 'ssh jenkins@localhost "cd /mnt/chatbot/megabot_client_test; rm -Rf ./*"')
                
            }
        }
        
        stage('Jenkins Workspace to Real workspace Copy..'){
            sh '''
                   #!/bin/bash
                   sudo chmod -Rf 755 /mnt/chatbot/megabot_client_test
                   sudo yes | cp -rfp ./* /mnt/chatbot/megabot_client_test
                   sudo yes | cp -rfp ./.[^.]*  /mnt/chatbot/megabot_client_test
                   '''
        }
       
        sshagent(['jenkins-deploy']) {
            stage ('Megabot-Client Stop') {
                sh 'ssh jenkins@localhost "pwd"'
                pid_id = sh(returnStdout: true, script: 'cd /mnt/chatbot/megabot_client_test; pm2 stop mega-chatbot-frontend')
                echo "${pid_id}"
            }
        }
      
        sshagent(['jenkins-deploy']) {
            stage ('Megabot-Client Restart') {
                sh(returnStdout: false, script: 'ssh jenkins@localhost "cd /mnt/chatbot/megabot_client_test; pm2 restart mega-chatbot-frontend" ')
                
            }
        }
      
        
        
        notifyBuild('SUCCESSFUL')
    }catch (exc) {
     
       notifyBuild('ERROR')
      
       
       throw exc
    }
}   

def notifyBuild(String buildStatus = 'STARTED', String sub = '') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "Git `${git_branch}` Megabot React Client Service - #${env.BUILD_NUMBER} state  ${buildStatus} "
  def summary = "${subject}"
  if (buildStatus != 'STARTED') {
      summary = "${summary}  (<${env.JOB_URL}|결과확인>)"
  }

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  }else if (buildStatus == 'ABORTED') {
    color = 'RED'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }
  slackSend(
      message: summary,
      botUser: false,
      teamDomain: "dxlabsworkspace",
      baseUrl: "https://dxlabsworkspace.slack.com/services/hooks/jenkins-ci/", 
      tokenCredentialId: "slack-token")
 
}