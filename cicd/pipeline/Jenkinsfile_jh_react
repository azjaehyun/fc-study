pipeline {
    //tools {
    //    jdk("java17")
    //}
    agent any

    environment {
       ECR_REPO = "767404772322.dkr.ecr.us-east-2.amazonaws.com"
       AWS_CREDENTIALS="AWSCredentials"
       ECR_NAME = "ecr-dev-react-ea2"
       ECS_TASK = "task-dev-react-an2"
       ECS_CLUSTER = "ecs-dev-fc-an2-cluster"
    }

    stages {
        // stage('Git Clone') {
        //     steps {
        //         script {
        //             try {
        //                 git url: "git@bitbucket.org:snicorp/snicorp-hpa-iot.git", branch: "dev"
        //                 sh "sudo rm -rf ./.git" 
        //             } catch (error) {
        //                 print(error)
        //             }
        //         }
        //     }
        // }

        stage('Git Clone') {
            steps {
                dir("app") {
                    git branch: 'main', credentialsId: 'azjaehyun', url: 'https://github.com/azjaehyun/fc-study.git'
                }
            }
        }

        stage('Gradlew Build') {
            steps{
                dir('app/frontend'){
                    sh '''
                    chmod +x gradlew
                    ./gradlew clean build
                    '''
                }  
            }
        }

        stage('ECR Upload') {
            steps{
                script{
                    dir("app/frontend") {
                        try {                       
                            withAWS(region: 'us-east-2',credentials: "${AWS_CREDENTIALS}", role: 'arn:aws:iam::047675330097:role/cicd-deploy', roleAccount: "jaehyun.yang@bespinglobal.com", externalId: 'externalId') {
                                sh 'aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin  ${ECR_REPO}'
                                sh 'docker build -t ${ECR_NAME} .'
                                sh 'docker tag ${ECR_NAME}:latest ${ECR_REPO}/${ECR_NAME}:$BUILD_NUMBER'
                                sh 'docker push ${ECR_REPO}/${ECR_NAME}:$BUILD_NUMBER'
                                sh 'docker rmi ${ECR_REPO}/${ECR_NAME}:$BUILD_NUMBER'
                        
                            }
                        }
                        catch(error){
                            print(error)
                            currentBuild.result = 'FAILURE'
                        } 
                    }
                }
            }
            post {
                success {
                    echo "The ECR Upload stage successfully."
                }
                failure {
                    echo "The ECR Upload stage failed."
                }
            }
        }
        stage('Deploy'){
            steps {
                script{
                    dir("app/frontend") {
                        try {
                            withAWS(region: 'us-east-2',credentials: "${AWS_CREDENTIALS}", role: 'arn:aws:iam::047675330097:role/cicd-deploy', roleAccount: "jaehyun.yang@bespinglobal.com", externalId: 'externalId') {
                                // task 정의 파일(json)에서 docker 이미지태그 변경
                                sh '''sed -i 's/'${ECR_NAME}':0/'${ECR_NAME}':'${BUILD_NUMBER}'/g' ${ECS_TASK}.json'''
                                // task 정의 파일(json)에서 변경된 docker 이미지를 반영하여 테스크정의:개정 업데이트 , jq 사용하여 개정 추출(${task_number})
                                def task_number = sh(script: "aws ecs register-task-definition --cli-input-json file://${ECS_TASK}.json --region us-east-2 | jq --raw-output .taskDefinition.revision", returnStdout: true).trim() as Integer
                                // 클러스터 명, 클러스터 안에 서비스 명, 클러스터 서비스 안에서 사용할 task 명 작성 
                                def ecs_update_url = "aws ecs update-service --region us-east-2 --cluster ${ECS_CLUSTER} --service ${ECS_TASK} --force-new-deployment --task-definition ${ECS_TASK}:${task_number}"
                                sh ecs_update_url
                            }
                            
                        } catch (error) {
                            print(error)
                            echo 'Remove Deploy Files'
                            sh "sudo rm -rf /var/lib/jenkins/workspace/${env.JOB_NAME}/*"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
            post {
                success {
                    echo "The deploy stage successfully."
                }
                failure {
                    echo "The deploy stage failed."
                }
            }
        }
    }
}

