pipeline {
    agent any

    environment {
       ECR_REPO = "225631650246.dkr.ecr.ap-northeast-2.amazonaws.com"
       AWS_CREDENTIALS="AWSCredentials"
    }

    stages {
        stage('Git Clone') {
            steps {
                script {
                    try {
                        git url: "https://taehyeon_kim_bs@bitbucket.org/snicorp/cicdtest.git", branch: "master", credentialsId: "$GIT"
                        sh "sudo rm -rf ./.git"
                    } catch (error) {
                        print(error)
                    }
                }
            }
        }
        stage('ECR Upload') {
            steps{
                script{
                    try {                       
                        withAWS(credentials: "${AWS_CREDENTIALS}", role: 'arn:aws:iam::225631650246:role/cicd-deploy', roleAccount: "cicd-depoly_user", externalId: 'externalId') {
                            sh 'aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${ECR_REPO}'
                            sh 'docker build -t sni-cat .'
                            sh 'docker tag sni-cat:latest ${ECR_REPO}/sni-cat:$BUILD_NUMBER'
                            sh 'docker push ${ECR_REPO}/sni-cat:$BUILD_NUMBER'
                        }
                    }
                    catch(error){
                        print(error)
                        currentBuild.result = 'FAILURE'
                    } 
                }
            }
            post {
                success {
                    echo "The ECR Upload stage successfully."
                }
                failure {
                    echo "The ECR Upload stage failed."
                }
            }
        }
        stage('Deploy'){
            steps {
                script{
                    try {
                        withAWS(credentials: "${AWS_CREDENTIALS}", role: 'arn:aws:iam::225631650246:role/cicd-deploy', roleAccount: 'cicd-depoly_user', externalId:'externalId') {
                            sh"""
                                aws ecs update-service --region ap-northeast-2 --cluster sni-cluster --service sni-cat --force-new-deployment
                            """
                        }
                        
                    } catch (error) {
                        print(error)
                        echo 'Remove Deploy Files'
                        sh "sudo rm -rf /var/lib/jenkins/workspace/${env.JOB_NAME}/*"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
            post {
                success {
                    echo "The deploy stage successfully."
                }
                failure {
                    echo "The deploy stage failed."
                }
            }
        }
    }
}