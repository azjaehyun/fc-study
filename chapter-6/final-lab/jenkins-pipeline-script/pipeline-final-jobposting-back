pipeline {
   
    agent any
    environment {
       ECR_REPO = "047675330097.dkr.ecr.ap-northeast-2.amazonaws.com"  // ecr repository uri
       AWS_CREDENTIALS="cne-aws-key" // aws credentialsId 
       ECR_NAME = "jobposting-back" // ecr 이름
       ECS_TASK = "jobposting-back-service" // ecs task 이름과 ecs service 이름
       ECS_CLUSTER = "final-cluster" // ecs 클러스터 이름 
       REGION = "ap-northeast-2" // region 이름
       GIT_REPO = "https://github.com/azjaehyun/fc-study.git" // git 이름
       SLACK_CHANNER = "jenkins-fc" // slack channer 이름
       IAM_ROLE_NAME = "arn:aws:iam::047675330097:role/ecs-cicd-deploy" // aws cli ecs , ecr 사용시 사용
       ROLE_ACCOUNT = "developer" // 계정 이름
    }
    stages {

        stage('Git Clone') {
            steps {
                dir("app") {
                    git branch: 'main', credentialsId: 'azjaehyun', url: "${GIT_REPO}"
                }
            }
        }

        stage('Gradlew Build') {
            steps{
                dir("app/chapter-6/final-lab/${ECR_NAME}"){
                    sh '''
                    chmod +x gradlew
                    ./gradlew build --exclude-task test
                    '''
                }  
            }
        }
        stage('ECR Upload') {
            steps{
                script{
                    dir("app/chapter-6/final-lab/${ECR_NAME}") {
                        try {                       
                            withAWS(region: "${REGION}",credentials: "${AWS_CREDENTIALS}", role: "${IAM_ROLE_NAME}", roleAccount: "${ROLE_ACCOUNT}", externalId: 'externalId') {
                                sh 'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin  ${ECR_REPO}'
                                sh 'docker build -t ${ECR_NAME} .'
                                sh 'docker tag ${ECR_NAME}:latest ${ECR_REPO}/${ECR_NAME}:$BUILD_NUMBER'
                                sh 'docker push ${ECR_REPO}/${ECR_NAME}:$BUILD_NUMBER'
                                sh 'docker rmi ${ECR_REPO}/${ECR_NAME}:$BUILD_NUMBER'
                        
                            }
                        }
                        catch(error){
                            print(error)
                            currentBuild.result = 'FAILURE'
                        } 
                    }
                }
            }
            post {
                success {
                    echo "The ECR Upload stage successfully."
                }
                failure {
                    echo "The ECR Upload stage failed."
                }
            }
        }
        stage('Deploy'){
            steps {
                script{
                    dir("app/chapter-6/final-lab/${ECR_NAME}") {
                        try {
                            withAWS(region: "${REGION}",credentials: "${AWS_CREDENTIALS}", role: "${IAM_ROLE_NAME}", roleAccount: "${ROLE_ACCOUNT}", externalId: 'externalId') {
                                // task 정의 파일(json)에서 docker 이미지태그 변경
                                sh '''sed -i 's/'${ECR_NAME}':0/'${ECR_NAME}':'${BUILD_NUMBER}'/g' ${ECS_TASK}.json'''
                                // task 정의 파일(json)에서 변경된 docker 이미지를 반영하여 테스크정의:개정 업데이트 , jq 사용하여 개정 추출(${task_number})
                                def task_number = sh(script: "aws ecs register-task-definition --cli-input-json file://${ECS_TASK}.json --region ${REGION} | jq --raw-output .taskDefinition.revision", returnStdout: true).trim() as Integer
                                // 클러스터 명, 클러스터 안에 서비스 명, 클러스터 서비스 안에서 사용할 task 명 작성 
                                def ecs_update_url = "aws ecs update-service --region ${REGION} --cluster ${ECS_CLUSTER} --service ${ECS_TASK} --force-new-deployment --task-definition ${ECS_TASK}:${task_number} "
                                sh ecs_update_url
                               
                            }
                            
                        } catch (error) {
                            print(error)
                            echo 'Remove Deploy Files'
                            sh "sudo rm -rf /var/lib/jenkins/workspace/${env.JOB_NAME}/*"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
            post {
                success {
                    echo "The deploy stage successfully."
                }
                failure {
                    echo "The deploy stage failed."
                }
            }
        }
    }

    
    post {
        success {
        slackSend (
            channel: "${SLACK_CHANNER}", 
            color: '#00FF00', 
            message: """
                SUCCESS: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]
                [ECR_NAME : ${ECR_NAME}]
            """
            )
        }
        failure {
            slackSend (
                channel: "${SLACK_CHANNER}", 
                color: '#FF0000', 
                message: "FAIL: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]  [ECR_NAME : ${ECR_NAME}]"
            )
        }
    }
     
        
    
}

