#################################
# 01. docker commit으로 컨테이너 빌드
# centos:7(layer 1)  + httpd 웹서버 설치, index.html 수정(layer 1) =docker commit=> webserver:v1 컨테이너 이미지(ro 2) 빌드
docker run --name centos -it centos:7
/]# yum install -y httpd curl
/]# echo 'Fast Campus!' > /var/www/html/index.html
/]# /sbin/httpd -DFOREGROUND &
/]# curl localhost
/]# exit
docker ps -a

# docker  commait 
# Create a new image from a container's changes
docker commit --change='CMD ["/sbin/httpd", "-DFOREGROUND"]'  centos  webserver:v1

# 생성된 container image 확인 및 실행 TEST
docker images
docker run -d --name web webserver:v1
curl 172.17.0.2

# 컨테이너 삭제
docker rm -f web

#################################
# 02. dockerfile을 이용한 컨테이너 빌드
# centos:7  + httpd 웹서버 설치, index.html 수정 ==> webserver:v1 컨테이너 이미지 빌드'
# 빌드를 위한 디렉토리 생성
mkdir -p build/webserver
cd build/webserver/
cat <<END > Dockerfile
FROM centos:7
RUN yum install  -y httpd curl 
RUN echo "Fast Campus" > /var/www/html/index.html
CMD ["/sbin/httpd", "-DFOREGROUND"]
END
ls

docker build -t webserver:v2 .
docker images
docker run -d --name web webserver:v2
curl 172.17.0.2

docker rm -f web

#################################
# 03. Dockerfile
# FROM : 컨테이너의 Base Image(java, node, centos container)를 지정. 
#        alpine, debian, ubuntu, centos, node, python, scratch, ...
# LABEL maintainer="seongmi lee <seongmi.lee@email.address>"
# RUN : FROM으로 부터 받은 base image에서 실행할 명령어 
#    FROM python                  FROM centos:7            FROM debian:bookworm-slim
#    RUN  pip install tensorflow  RUN yum install httpd    RUN apt-get update && apt-get install apache2
# COPY : 도커 호스트에 만들어둔 파일이나 디렉토리를 컨테이너로 복사해서 저장(*문자 사용. 디렉토리 이름은 /로 종료)
echo "Welcome to Fast Campus World." > index.html

FROM centos:7
RUN yum install -y httpd curl
COPY index.html /var/www/html/index.html
CMD ["/sbin/httpd", "-DFOREGROUND"]

# ADD : 컨테이너 이미지에 호스트 파일을 복사한다. 
#       COPY와는 달리 압축된 파일은 압축을 해제하여 컨테이너 이미지로 복사하고, URL 링크에 있는 파일 복사도 가능하다.
tree html
tar cf html.tar html/

FROM centos:7
RUN yum install -y httpd
ADD html.tar /var/www/
CMD ["/sbin/httpd", "-DFOREGROUND"]

# WORKDIR : WORKDIR은 컨테이너의 작업 디렉토리를 설정. 
# ENV: ENV는 환경 변수를 설정한다. 
# EXPOSE : 컨테이너가 시작할 때 외부에 포트를 노출
# USER : USER뒤에 나오는 지시어는 USER에서 정의한 username 권한으로 실행된다.
# CMD :  CMD는 컨테이너가 시작되었을 때 자동으로 실행할 스크립트나 명령을 입력한다.
# ENTRYPOINT : CMD와 같은 역할을 하나 마치 실행가능한 binary와 같이 정의한다. 

FROM centos:7
RUN yum install -y httpd
WORKDIR /var/www
ADD html.tar  . 
ENV VERSION 15
EXPOSE 80
CMD ["/sbin/httpd", "-DFOREGROUND"]

docker build -t exam -f  Dockerfile .
docker ps
docker run --name exam -it exam /bin/bash
#/ pwd
#/ ls html
#/ env
#/ exit

docker rm -f exam


#################################
# 04. Dockerfile 작성 모범사례(Best Practice)

#.ignore file
# 빌드 디렉토리에 이런 파일들이 있다 가정하면
# index.html test.html password.txt Dockerfile  .git/*  data/file

cat .dockerignore
Dockerfile
password*
.git/*

cat  Dockerfile
FROM centos:7
RUN yum install -y httpd && yum clean all
COPY * /var/www/
CMD ["/sbin/httpd", "-DFOREGROUND"]


# 경량의 컨테이너 이미지 빌드
# Base Image: scratch, alpine, debian, ubuntu, centos, node, python...
# multistage 빌드
mkdir ~/build/app1
cd ~/build/app1
cat <<END > main.go
package main
import(
    "fmt"
    "time"
)
func main() {
    for {
        fmt.Println("Hello, world!")
        time.Sleep(10 * time.Second)
    }
}
END

# 멀티스테이지 적용 하지 않고 컨테이너 빌드
cat  Dockerfile
FROM golang:1.11
WORKDIR /usr/src/app
COPY main.go .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-s' -o main .
CMD ["main"]
END


# 멀티스테이지를 적용하여 컨테이너 빌드
cat  Multi-dockerfile
FROM golang:1.11 as builder
WORKDIR /usr/src/app
COPY main.go .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-s' -o main .

FROM scratch
COPY --from=builder  /usr/src/app/main  /main 
CMD ["/main"]
END



